{"ast":null,"code":"export var actionCreators = {\n  addToCoordenada: function addToCoordenada(marker) {\n    return {\n      payload: marker,\n      type: 'ADD_TO_COORDENADA'\n    };\n  },\n  deleteProduct: function deleteProduct() {\n    return {\n      type: 'DELETE_COORDENADA'\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport var reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    var markers = [];\n    /* let markers = [{\n        lat: 37.77484758908875,\n        lng: -122.44252162500497\n      },{\n        lat: 37.78155013787093, \n        lng: -122.47137790613787\n      },{\n        lat: 37.77985420629088, \n        lng: -122.49541049891131\n      }] */\n\n    return {\n      markers: markers\n    };\n  }\n\n  console.log('incomingAction: ' + JSON.stringify(incomingAction));\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'DELETE_COORDENADA':\n      action = incomingAction;\n      var markers2;\n      markers2 = [];\n      return {\n        markers: markers2\n      };\n\n    case 'ADD_TO_COORDENADA':\n      action = incomingAction; //let products:Array<Producto>\n\n      var _markers = [];\n\n      for (var x in state.markers) {\n        _markers.push(state.markers[x]);\n      }\n\n      _markers.push({\n        lat: action.payload.lat,\n        lng: action.payload.lng\n      });\n\n      return {\n        markers: _markers\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/store/google/GoogleMaps.ts"],"names":["actionCreators","addToCoordenada","marker","payload","type","deleteProduct","reducer","state","incomingAction","undefined","markers","console","log","JSON","stringify","action","markers2","x","push","lat","lng"],"mappings":"AAiCA,OAAO,IAAMA,cAAc,GAAG;AAE1BC,EAAAA,eAAe,EAAE,yBAACC,MAAD;AAAA,WAAwB;AAAEC,MAAAA,OAAO,EAACD,MAAV;AAAkBE,MAAAA,IAAI,EAAE;AAAxB,KAAxB;AAAA,GAFS;AAG1BC,EAAAA,aAAa,EAAE;AAAA,WAAO;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAP;AAAA;AAHW,CAAvB,C,CAOP;AACA;;AAEA,OAAO,IAAME,OAA6B,GAAG,SAAhCA,OAAgC,CAACC,KAAD,EAAiCC,cAAjC,EAA8E;AACvH,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,QAAIC,OAAW,GAAG,EAAlB;AACA;;;;;;;;;;;AAUA,WAAO;AAAEA,MAAAA,OAAO,EAAEA;AAAX,KAAP;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAmBC,IAAI,CAACC,SAAL,CAAeN,cAAf,CAA/B;AACA,MAAIO,MAAM,GAAGP,cAAb;;AACA,UAAQO,MAAM,CAACX,IAAf;AACI,SAAK,mBAAL;AACIW,MAAAA,MAAM,GAAGP,cAAT;AACA,UAAIQ,QAAJ;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACA,aAAQ;AAAEN,QAAAA,OAAO,EAAEM;AAAX,OAAR;;AAGJ,SAAK,mBAAL;AACID,MAAAA,MAAM,GAAGP,cAAT,CADJ,CAEI;;AACA,UAAIE,QAAW,GAAG,EAAlB;;AACA,WAAI,IAAIO,CAAR,IAAaV,KAAK,CAACG,OAAnB,EAA2B;AACvBA,QAAAA,QAAO,CAACQ,IAAR,CAAaX,KAAK,CAACG,OAAN,CAAcO,CAAd,CAAb;AACH;;AACDP,MAAAA,QAAO,CAACQ,IAAR,CAAa;AACTC,QAAAA,GAAG,EAAEJ,MAAM,CAACZ,OAAP,CAAegB,GADX;AAETC,QAAAA,GAAG,EAAEL,MAAM,CAACZ,OAAP,CAAeiB;AAFX,OAAb;;AAKA,aAAQ;AAAEV,QAAAA,OAAO,EAAEA;AAAX,OAAR;;AAEJ;AACI,aAAOH,KAAP;AAvBR;AAyBH,CA1CM","sourcesContent":["import { Reducer } from 'redux';\nimport {GoogleAPI} from 'google-maps-react';\n\n\nexport interface Coordenada{\n    lat: number,\n    lng: number\n}\n\nexport interface MarkerGoogleState{\n    markers:Coordenada[]\n    google: GoogleAPI\n    loaded?: boolean\n} \n\nexport interface MarkerState{\n    markers:Coordenada[]\n    \n}  \n\nexport interface ADD_TO_COORDENADA { \n    type: 'ADD_TO_COORDENADA',\n    payload:{\n        lat: number,\n        lng: number\n    }\n}\nexport interface DELETE_COORDENADA { \n    type: 'DELETE_COORDENADA'\n}\n\nexport type KnownAction = ADD_TO_COORDENADA | DELETE_COORDENADA;\n\nexport const actionCreators = {\n\n    addToCoordenada: (marker:Coordenada) => ({ payload:marker, type: 'ADD_TO_COORDENADA' } as ADD_TO_COORDENADA),  \n    deleteProduct: () => ({ type: 'DELETE_COORDENADA' } as DELETE_COORDENADA)  \n\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport const reducer: Reducer<MarkerState> = (state: MarkerState | undefined, incomingAction: KnownAction): MarkerState => {\n    if (state === undefined) {\n        let markers:any = []\n        /* let markers = [{\n            lat: 37.77484758908875,\n            lng: -122.44252162500497\n          },{\n            lat: 37.78155013787093, \n            lng: -122.47137790613787\n          },{\n            lat: 37.77985420629088, \n            lng: -122.49541049891131\n          }] */\n        return { markers: markers };\n    }\n    console.log('incomingAction: '+JSON.stringify(incomingAction))\n    var action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'DELETE_COORDENADA':\n            action = incomingAction as DELETE_COORDENADA;\n            let markers2:Coordenada[]\n            markers2 = []\n            return  { markers: markers2 };\n            \n\n        case 'ADD_TO_COORDENADA':\n            action = incomingAction as ADD_TO_COORDENADA;\n            //let products:Array<Producto>\n            let markers:any = []\n            for(var x in state.markers){\n                markers.push(state.markers[x]);\n            }\n            markers.push({\n                lat: action.payload.lat,\n                lng: action.payload.lng,\n            }); \n            \n            return  { markers: markers };\n            \n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}