{"ast":null,"code":"// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators = {\n  requestWeatherForecasts: function requestWeatherForecasts(startDateIndex) {\n    return function (dispatch, getState) {\n      // Only load data if it's something we don't already have (and are not already loading)\n      var appState = getState();\n\n      if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\n        fetch(\"weatherforecast\").then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          dispatch({\n            type: 'RECEIVE_WEATHER_FORECASTS',\n            startDateIndex: startDateIndex,\n            forecasts: data\n          });\n        });\n        dispatch({\n          type: 'REQUEST_WEATHER_FORECASTS',\n          startDateIndex: startDateIndex\n        });\n      }\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nvar unloadedState = {\n  forecasts: [],\n  isLoading: false\n};\nexport var reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    return unloadedState;\n  }\n\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'REQUEST_WEATHER_FORECASTS':\n      return {\n        startDateIndex: action.startDateIndex,\n        forecasts: state.forecasts,\n        isLoading: true\n      };\n\n    case 'RECEIVE_WEATHER_FORECASTS':\n      // Only accept the incoming data if it matches the most recent request. This ensures we correctly\n      // handle out-of-order responses.\n      if (action.startDateIndex === state.startDateIndex) {\n        return {\n          startDateIndex: action.startDateIndex,\n          forecasts: action.forecasts,\n          isLoading: false\n        };\n      }\n\n      break;\n  }\n\n  return state;\n};","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/store/WeatherForecasts.ts"],"names":["actionCreators","requestWeatherForecasts","startDateIndex","dispatch","getState","appState","weatherForecasts","fetch","then","response","json","data","type","forecasts","unloadedState","isLoading","reducer","state","incomingAction","undefined","action"],"mappings":"AAGA;AACA;AAeA;AACA;AACA;AAaA;AACA;AAGA;AACA;AACA;AAEA,OAAO,IAAMA,cAAc,GAAG;AAC1BC,EAAAA,uBAAuB,EAAE,iCAACC,cAAD;AAAA,WAAyD,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtG;AACA,UAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;AACA,UAAIC,QAAQ,IAAIA,QAAQ,CAACC,gBAArB,IAAyCJ,cAAc,KAAKG,QAAQ,CAACC,gBAAT,CAA0BJ,cAA1F,EAA0G;AACtGK,QAAAA,KAAK,mBAAL,CACKC,IADL,CACU,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SADlB,EAEKF,IAFL,CAEU,UAAAG,IAAI,EAAI;AACVR,UAAAA,QAAQ,CAAC;AAAES,YAAAA,IAAI,EAAE,2BAAR;AAAqCV,YAAAA,cAAc,EAAEA,cAArD;AAAqEW,YAAAA,SAAS,EAAEF;AAAhF,WAAD,CAAR;AACH,SAJL;AAMAR,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAE,2BAAR;AAAqCV,UAAAA,cAAc,EAAEA;AAArD,SAAD,CAAR;AACH;AACJ,KAZwB;AAAA;AADC,CAAvB,C,CAgBP;AACA;;AAEA,IAAMY,aAAoC,GAAG;AAAED,EAAAA,SAAS,EAAE,EAAb;AAAiBE,EAAAA,SAAS,EAAE;AAA5B,CAA7C;AAEA,OAAO,IAAMC,OAAuC,GAAG,SAA1CA,OAA0C,CAACC,KAAD,EAA2CC,cAA3C,EAA6F;AAChJ,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,WAAOL,aAAP;AACH;;AAED,MAAMM,MAAM,GAAGF,cAAf;;AACA,UAAQE,MAAM,CAACR,IAAf;AACI,SAAK,2BAAL;AACI,aAAO;AACHV,QAAAA,cAAc,EAAEkB,MAAM,CAAClB,cADpB;AAEHW,QAAAA,SAAS,EAAEI,KAAK,CAACJ,SAFd;AAGHE,QAAAA,SAAS,EAAE;AAHR,OAAP;;AAKJ,SAAK,2BAAL;AACI;AACA;AACA,UAAIK,MAAM,CAAClB,cAAP,KAA0Be,KAAK,CAACf,cAApC,EAAoD;AAChD,eAAO;AACHA,UAAAA,cAAc,EAAEkB,MAAM,CAAClB,cADpB;AAEHW,UAAAA,SAAS,EAAEO,MAAM,CAACP,SAFf;AAGHE,UAAAA,SAAS,EAAE;AAHR,SAAP;AAKH;;AACD;AAjBR;;AAoBA,SAAOE,KAAP;AACH,CA3BM","sourcesContent":["import { Action, Reducer } from 'redux';\nimport { AppThunkAction } from './';\n\n// -----------------\n// STATE - This defines the type of data maintained in the Redux store.\n\nexport interface WeatherForecastsState {\n    isLoading: boolean;\n    startDateIndex?: number;\n    forecasts: WeatherForecast[];\n}\n\nexport interface WeatherForecast {\n    date: string;\n    temperatureC: number;\n    temperatureF: number;\n    summary: string;\n}\n\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n\ninterface RequestWeatherForecastsAction {\n    type: 'REQUEST_WEATHER_FORECASTS';\n    startDateIndex: number;\n}\n\ninterface ReceiveWeatherForecastsAction {\n    type: 'RECEIVE_WEATHER_FORECASTS';\n    startDateIndex: number;\n    forecasts: WeatherForecast[];\n}\n\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\ntype KnownAction = RequestWeatherForecastsAction | ReceiveWeatherForecastsAction;\n\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexport const actionCreators = {\n    requestWeatherForecasts: (startDateIndex: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\n        // Only load data if it's something we don't already have (and are not already loading)\n        const appState = getState();\n        if (appState && appState.weatherForecasts && startDateIndex !== appState.weatherForecasts.startDateIndex) {\n            fetch(`weatherforecast`)\n                .then(response => response.json() as Promise<WeatherForecast[]>)\n                .then(data => {\n                    dispatch({ type: 'RECEIVE_WEATHER_FORECASTS', startDateIndex: startDateIndex, forecasts: data });\n                });\n\n            dispatch({ type: 'REQUEST_WEATHER_FORECASTS', startDateIndex: startDateIndex });\n        }\n    }\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nconst unloadedState: WeatherForecastsState = { forecasts: [], isLoading: false };\n\nexport const reducer: Reducer<WeatherForecastsState> = (state: WeatherForecastsState | undefined, incomingAction: Action): WeatherForecastsState => {\n    if (state === undefined) {\n        return unloadedState;\n    }\n\n    const action = incomingAction as KnownAction;\n    switch (action.type) {\n        case 'REQUEST_WEATHER_FORECASTS':\n            return {\n                startDateIndex: action.startDateIndex,\n                forecasts: state.forecasts,\n                isLoading: true\n            };\n        case 'RECEIVE_WEATHER_FORECASTS':\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\n            // handle out-of-order responses.\n            if (action.startDateIndex === state.startDateIndex) {\n                return {\n                    startDateIndex: action.startDateIndex,\n                    forecasts: action.forecasts,\n                    isLoading: false\n                };\n            }\n            break;\n    }\n\n    return state;\n};\n"]},"metadata":{},"sourceType":"module"}