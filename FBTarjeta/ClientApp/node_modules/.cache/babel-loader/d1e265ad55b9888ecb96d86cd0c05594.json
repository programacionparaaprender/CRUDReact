{"ast":null,"code":"import * as WeatherForecasts from './WeatherForecasts';\nimport * as Counter from './Counter';\nimport * as Product from './Product';\nimport * as Vieja from './Vieja';\nimport * as GoogleMaps from './google/GoogleMaps'; //import { ProductState }  from '../types.ts'\n// The top-level state object\n\nimport * as TarjetaCredito from './TarjetaCredito';\n// Whenever an action is dispatched, Redux will update each top-level application state property using\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\n// acts on the corresponding ApplicationState property type.\nexport var reducers = {\n  counter: Counter.reducer,\n  products: Product.reducer,\n  weatherForecasts: WeatherForecasts.reducer,\n  vieja: Vieja.reducer,\n  googlemaps: GoogleMaps.reducer,\n  tarjetas: TarjetaCredito.reducer\n}; // This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\n// correctly typed to match your store.","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/store/index.ts"],"names":["WeatherForecasts","Counter","Product","Vieja","GoogleMaps","TarjetaCredito","reducers","counter","reducer","products","weatherForecasts","vieja","googlemaps","tarjetas"],"mappings":"AAAA,OAAO,KAAKA,gBAAZ,MAAkC,oBAAlC;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,WAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,qBAA5B,C,CACA;AACA;;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;AAWA;AACA;AACA;AACA,OAAO,IAAMC,QAAQ,GAAG;AACpBC,EAAAA,OAAO,EAAEN,OAAO,CAACO,OADG;AAEpBC,EAAAA,QAAQ,EAAEP,OAAO,CAACM,OAFE;AAGpBE,EAAAA,gBAAgB,EAAEV,gBAAgB,CAACQ,OAHf;AAIpBG,EAAAA,KAAK,EAAER,KAAK,CAACK,OAJO;AAKpBI,EAAAA,UAAU,EAAER,UAAU,CAACI,OALH;AAMpBK,EAAAA,QAAQ,EAAER,cAAc,CAACG;AANL,CAAjB,C,CASP;AACA","sourcesContent":["import * as WeatherForecasts from './WeatherForecasts';\nimport * as Counter from './Counter';\nimport * as Product from './Product';\nimport * as Vieja from './Vieja';\nimport * as GoogleMaps from './google/GoogleMaps';\n//import { ProductState }  from '../types.ts'\n// The top-level state object\nimport * as TarjetaCredito from './TarjetaCredito';\n\nexport interface ApplicationState {\n    counter: Counter.CounterState | undefined;\n    products: Product.ProductState | undefined;\n    weatherForecasts: WeatherForecasts.WeatherForecastsState | undefined;\n    vieja: Vieja.ViejaState | undefined;\n    markers: GoogleMaps.MarkerState | undefined;\n    tarjetas: TarjetaCredito.WeatherTarjetaState | undefined;\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property using\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\n// acts on the corresponding ApplicationState property type.\nexport const reducers = {\n    counter: Counter.reducer,\n    products: Product.reducer,\n    weatherForecasts: WeatherForecasts.reducer,\n    vieja: Vieja.reducer,\n    googlemaps: GoogleMaps.reducer,\n    tarjetas: TarjetaCredito.reducer,\n};\n\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\n// correctly typed to match your store.\nexport interface AppThunkAction<TAction> {\n    (dispatch: (action: TAction) => void, getState: () => ApplicationState): void;\n}\n"]},"metadata":{},"sourceType":"module"}