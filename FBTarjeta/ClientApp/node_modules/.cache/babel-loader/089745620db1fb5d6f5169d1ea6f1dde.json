{"ast":null,"code":"// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators = {\n  increment: function increment() {\n    return {\n      payload: 'data',\n      type: 'INCREMENT_COUNT'\n    };\n  },\n  decrement: function decrement() {\n    return {\n      type: 'DECREMENT_COUNT'\n    };\n  },\n  deleteProduct: function deleteProduct(id) {\n    return {\n      id: id,\n      type: 'DELETE_PRODUCT'\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport var reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    var vieja = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n    return {\n      vieja: vieja\n    };\n  }\n\n  console.log('incomingAction: ' + JSON.stringify(incomingAction));\n  var action = incomingAction;\n\n  switch (action.type) {\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/store/Vieja.ts"],"names":["actionCreators","increment","payload","type","decrement","deleteProduct","id","reducer","state","incomingAction","undefined","vieja","history","squares","Array","fill","stepNumber","xIsNext","console","log","JSON","stringify","action"],"mappings":"AAsBA;AACA;AAGA;AACA;AACA;AAEA,OAAO,IAAMA,cAAc,GAAG;AAC1BC,EAAAA,SAAS,EAAE;AAAA,WAAO;AAAEC,MAAAA,OAAO,EAAC,MAAV;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAP;AAAA,GADe;AAE1BC,EAAAA,SAAS,EAAE;AAAA,WAAO;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAP;AAAA,GAFe;AAG1BE,EAAAA,aAAa,EAAE,uBAACC,EAAD;AAAA,WAAgB;AAAEA,MAAAA,EAAE,EAACA,EAAL;AAAQH,MAAAA,IAAI,EAAE;AAAd,KAAhB;AAAA;AAHW,CAAvB,C,CAOP;AACA;;AAEA,OAAO,IAAMI,OAA4B,GAAG,SAA/BA,OAA+B,CAACC,KAAD,EAAgCC,cAAhC,EAA4E;AACpH,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,QAAIC,KAAK,GAAG;AACRC,MAAAA,OAAO,EAAE,CAAC;AACRC,QAAAA,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd;AADD,OAAD,CADD;AAIRC,MAAAA,UAAU,EAAE,CAJJ;AAKRC,MAAAA,OAAO,EAAE;AALD,KAAZ;AAOA,WAAO;AAAEN,MAAAA,KAAK,EAAEA;AAAT,KAAP;AACH;;AACDO,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAmBC,IAAI,CAACC,SAAL,CAAeZ,cAAf,CAA/B;AACA,MAAIa,MAAM,GAAGb,cAAb;;AACA,UAAQa,MAAM,CAACnB,IAAf;AAGI;AACI,aAAOK,KAAP;AAJR;AAMH,CAnBM","sourcesContent":["import { Reducer } from 'redux';\nimport {Vieja,IBoard} from '../types'\n\nexport interface ViejaState {\n    vieja: Vieja\n}\n\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\nexport interface ADD_TO_CART { \n    type: 'ADD_TO_CART',\n    payload:{\n        id: string;\n        name: string;\n        description:string\n        price: string;\n    }\n}\nexport interface DELETE_PRODUCT { \n    type: 'DELETE_PRODUCT',\n    id: string;\n}\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\nexport type KnownAction = IncrementCountAction | DecrementCountAction | ADD_TO_CART | DELETE_PRODUCT;\n\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexport const actionCreators = {\n    increment: () => ({ payload:'data',type: 'INCREMENT_COUNT' } as IncrementCountAction),\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction),\n    deleteProduct: (id:string) => ({ id:id,type: 'DELETE_PRODUCT' } as DELETE_PRODUCT)  \n\n};\n\n// ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport const reducer: Reducer<ViejaState> = (state: ViejaState | undefined, incomingAction: KnownAction): ViejaState => {\n    if (state === undefined) {\n        let vieja = {\n            history: [{\n              squares: Array(9).fill(null),\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n          };\n        return { vieja: vieja }\n    }\n    console.log('incomingAction: '+JSON.stringify(incomingAction))\n    var action = incomingAction as KnownAction;\n    switch (action.type) {\n\n       \n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}