{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bus209\\\\Documents\\\\htdocs\\\\CRUDReact\\\\FBTarjeta\\\\ClientApp\\\\src\\\\components\\\\google\\\\GoogleMapsType.tsx\";\nimport { Polygon, Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport * as React from 'react';\n//IMapProps\n\n/* function Marcaciones(props:any) {\n    const tamanio = props.markers.length;\n    if (tamanio > 0) {\n      return  {props.markers.map((forecast: any) =>\n        <Marker \n            position={{\n                lat: forecast.lat,\n                lng: forecast.lng\n            }} />\n        )} ;\n    }\n    return <div />;\n} */\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapContainer, _React$Component);\n\n  //onMapClicked: mapEventHandler;\n  //markerEventHandler;\n  //map?: google.maps.Map | google.maps.StreetViewPanorama\n  function MapContainer(props) {\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapContainer).call(this, props));\n    _this.onMarkerClick = void 0;\n    _this.onInfoWindowClose = void 0;\n    _this.state = {\n      markers: []\n    };\n    _this.onMapa = _this.onMapa.bind(_assertThisInitialized(_this));\n    _this.btnLimpiar = _this.btnLimpiar.bind(_assertThisInitialized(_this)); //this.onMarkerClick = this.onMarkerClick.bind(this);\n    //this.onInfoWindowClose = this.onInfoWindowClose.bind(this);\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"btnLimpiar\",\n    value: function btnLimpiar() {\n      this.setState({\n        markers: []\n      });\n    }\n  }, {\n    key: \"onMapa\",\n    value: function onMapa(ref, map, ev) {\n      var latLng = ev.latLng; //console.log(e);\n\n      var latitude = latLng.lat();\n      var longitude = latLng.lng();\n      console.log(latitude + \", \" + longitude);\n      var coord;\n      coord = {\n        lat: latitude,\n        lng: longitude\n      };\n      var markers = [];\n\n      for (var x in this.state.markers) {\n        markers.push(this.state.markers[x]);\n      }\n\n      markers.push({\n        lat: coord.lat,\n        lng: coord.lng\n      });\n      this.setState({\n        markers: markers\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      //GoogleMaps.tsx:22 37.77484758908875, -122.44252162500497\n\n      /* let makers = [{\n          lat: 37.77484758908875,\n          lng: -122.44252162500497\n        },{\n          lat: 37.78155013787093, \n          lng: -122.47137790613787\n        },{\n          lat: 37.77985420629088, \n          lng: -122.49541049891131\n        }]\n      */\n      //\n      var style = {\n        height: \"200px\"\n      };\n      return React.createElement(\"div\", {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.btnLimpiar,\n        className: \"btn btn-warning btn.lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Limpiar\"), React.createElement(Map, {\n        onClick: this.onMapa,\n        google: this.props.google,\n        initialCenter: {\n          lat: 37.77484758908875,\n          lng: -122.44252162500497\n        },\n        zoom: 14,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.markers.map(function (forecast) {\n        return React.createElement(Marker, {\n          position: {\n            lat: forecast.lat,\n            lng: forecast.lng\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      }), React.createElement(Polygon, {\n        paths: this.state.markers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(React.Component);\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDZktO_JnnvrY4BnD2IyZo8PqNXiDTWP1w'\n})(MapContainer);","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/components/google/GoogleMapsType.tsx"],"names":["Polygon","Map","Marker","GoogleApiWrapper","React","MapContainer","props","onMarkerClick","onInfoWindowClose","state","markers","onMapa","bind","btnLimpiar","setState","ref","map","ev","latLng","latitude","lat","longitude","lng","console","log","coord","x","push","style","height","google","forecast","Component","apiKey"],"mappings":"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","sourcesContent":["import {Polygon, IProvidedProps,mapEventHandler,markerEventHandler,Map, InfoWindow, Marker, GoogleApiWrapper,IMapProps,} from 'google-maps-react';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from 'react-router';\nimport { ApplicationState } from '../../store';\nimport CSS from 'csstype';\n\nimport * as MarkerStore from '../../store/google/GoogleMaps';\nimport { Coordenada} from '../../store/google/GoogleMaps';\ntype MarkerProps =\nMarkerStore.MarkerGoogleState &\n    typeof MarkerStore.actionCreators &\n    RouteComponentProps<{}>;\n//IMapProps\n\n/* function Marcaciones(props:any) {\n    const tamanio = props.markers.length;\n    if (tamanio > 0) {\n      return  {props.markers.map((forecast: any) =>\n        <Marker \n            position={{\n                lat: forecast.lat,\n                lng: forecast.lng\n            }} />\n        )} ;\n    }\n    return <div />;\n} */\n\nexport class MapContainer extends React.Component<IMapProps, { markers: Coordenada[] }> {\n    //onMapClicked: mapEventHandler;\n    onMarkerClick: any//markerEventHandler;\n    \n    onInfoWindowClose: any;\n    //map?: google.maps.Map | google.maps.StreetViewPanorama\n    constructor(props:any){\n        super(props);\n        this.onMapa = this.onMapa.bind(this);\n        this.btnLimpiar = this.btnLimpiar.bind(this);\n        //this.onMarkerClick = this.onMarkerClick.bind(this);\n        //this.onInfoWindowClose = this.onInfoWindowClose.bind(this);\n    }\n    public state = {\n        markers: []\n    };\n    btnLimpiar(){\n        this.setState({markers: []});\n    }\n    onMapa(ref:any, map:any, ev:any){\n        const latLng = ev.latLng;\n        //console.log(e);\n        const latitude = latLng.lat(); \n        const longitude = latLng.lng(); \n        console.log(latitude + \", \" + longitude);  \n        var coord:Coordenada; \n        coord = {\n            lat: latitude,\n            lng: longitude,\n        }\n        let markers:any = []\n\n        for(var x in this.state.markers){\n            markers.push(this.state.markers[x]); \n        }\n        markers.push({\n            lat: coord.lat,\n            lng: coord.lng,\n        }); \n        this.setState({markers: markers});\n    }\n    componentDidMount() {\n        \n    }\n    public render() {\n        //GoogleMaps.tsx:22 37.77484758908875, -122.44252162500497\n        /* let makers = [{\n            lat: 37.77484758908875,\n            lng: -122.44252162500497\n          },{\n            lat: 37.78155013787093, \n            lng: -122.47137790613787\n          },{\n            lat: 37.77985420629088, \n            lng: -122.49541049891131\n          }]\n *///\n            const style: CSS.Properties = {\n                height:\"200px\"\n            };\n            return (\n                <div style={style}>\n                    <button \n                        onClick={this.btnLimpiar}\n                        className=\"btn btn-warning btn.lg\">\n                        Limpiar\n                    </button>\n                    <Map \n                        \n                        onClick={this.onMapa}\n                        google={this.props.google} \n                        initialCenter={{\n                            lat: 37.77484758908875,\n                            lng: -122.44252162500497\n                        }}\n                        zoom={14}>\n                            {this.state.markers.map((forecast: any) =>\n                            <Marker \n                                position={{\n                                    lat: forecast.lat,\n                                    lng: forecast.lng\n                                }} />\n                            )} \n                        <Polygon \n                                paths={this.state.markers} />  \n                    </Map>\n                </div>\n        );\n    }\n}\n \nexport  default GoogleApiWrapper({\n  apiKey: 'AIzaSyDZktO_JnnvrY4BnD2IyZo8PqNXiDTWP1w'\n})(MapContainer)\n\n"]},"metadata":{},"sourceType":"module"}