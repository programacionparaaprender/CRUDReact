{"ast":null,"code":"//import { Action, Reducer } from 'redux';\n// -----------------\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\n// They do not themselves have any side-effects; they just describe something that is going to happen.\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\n// declared type strings (and not any other arbitrary string).\n// ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\nexport var actionCreators = {\n  increment: function increment() {\n    return {\n      payload: 'data',\n      type: 'INCREMENT_COUNT'\n    };\n  },\n  decrement: function decrement() {\n    return {\n      type: 'DECREMENT_COUNT'\n    };\n  },\n  addToCart: function addToCart(product) {\n    return {\n      payload: product,\n      type: 'ADD_TO_CART'\n    };\n  },\n  deleteProduct: function deleteProduct(id) {\n    return {\n      id: id,\n      type: 'DELETE_PRODUCT'\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nexport var reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    var tarjetas = [{\n      id: 1,\n      titular: \"\",\n      numeroTarjeta: \"2626262626262626\",\n      fechaExpiracion: \"12/24\",\n      cvv: \"231\"\n    }];\n    return {\n      tarjetas: tarjetas\n    };\n  }\n\n  console.log('incomingAction: ' + JSON.stringify(incomingAction));\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'DELETE_PRODUCT':\n      action = incomingAction; //let products:Array<Producto>\n\n      var products2 = [];\n\n      for (var y in state.tarjetas) {\n        if (String(state.tarjetas[y].id) !== String(action.id)) products2.push(state.tarjetas[y]);\n      }\n\n      return {\n        tarjetas: products2\n      };\n\n    case 'ADD_TO_CART':\n      action = incomingAction; //let products:Array<Producto>\n\n      var products = [];\n\n      for (var x in state.tarjetas) {\n        products.push(state.tarjetas[x]);\n      }\n\n      products.push({\n        id: action.payload.id,\n        name: action.payload.name,\n        description: action.payload.description,\n        price: action.payload.price\n      });\n      return {\n        tarjetas: products\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/Bus209/Documents/htdocs/CRUDReact/FBTarjeta/ClientApp/src/store/TarjetaCredito.ts"],"names":["actionCreators","increment","payload","type","decrement","addToCart","product","deleteProduct","id","reducer","state","incomingAction","undefined","tarjetas","titular","numeroTarjeta","fechaExpiracion","cvv","console","log","JSON","stringify","action","products2","y","String","push","products","x","name","description","price"],"mappings":"AAAA;AAaA;AACA;AACA;AACA;AAiBA;AACA;AAGA;AACA;AACA;AAEA,OAAO,IAAMA,cAAc,GAAG;AAC1BC,EAAAA,SAAS,EAAE;AAAA,WAAO;AAAEC,MAAAA,OAAO,EAAC,MAAV;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAP;AAAA,GADe;AAE1BC,EAAAA,SAAS,EAAE;AAAA,WAAO;AAAED,MAAAA,IAAI,EAAE;AAAR,KAAP;AAAA,GAFe;AAG1BE,EAAAA,SAAS,EAAE,mBAACC,OAAD;AAAA,WAAuB;AAAEJ,MAAAA,OAAO,EAACI,OAAV;AAAkBH,MAAAA,IAAI,EAAE;AAAxB,KAAvB;AAAA,GAHe;AAI1BI,EAAAA,aAAa,EAAE,uBAACC,EAAD;AAAA,WAAgB;AAAEA,MAAAA,EAAE,EAACA,EAAL;AAAQL,MAAAA,IAAI,EAAE;AAAd,KAAhB;AAAA;AAJW,CAAvB,C,CAQP;AACA;;AAEA,OAAO,IAAMM,OAAqC,GAAG,SAAxCA,OAAwC,CAACC,KAAD,EAAyCC,cAAzC,EAA8F;AAC/I,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,QAAIC,QAAQ,GAAG,CACX;AACIL,MAAAA,EAAE,EAAC,CADP;AAEIM,MAAAA,OAAO,EAAE,EAFb;AAGIC,MAAAA,aAAa,EAAE,kBAHnB;AAIIC,MAAAA,eAAe,EAAE,OAJrB;AAKIC,MAAAA,GAAG,EAAG;AALV,KADW,CAAf;AASA,WAAO;AAAEJ,MAAAA,QAAQ,EAAEA;AAAZ,KAAP;AACH;;AACDK,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAmBC,IAAI,CAACC,SAAL,CAAeV,cAAf,CAA/B;AACA,MAAIW,MAAM,GAAGX,cAAb;;AACA,UAAQW,MAAM,CAACnB,IAAf;AACI,SAAK,gBAAL;AACImB,MAAAA,MAAM,GAAGX,cAAT,CADJ,CAEI;;AACA,UAAIY,SAAS,GAAG,EAAhB;;AACA,WAAI,IAAIC,CAAR,IAAad,KAAK,CAACG,QAAnB,EAA4B;AACxB,YAAGY,MAAM,CAACf,KAAK,CAACG,QAAN,CAAeW,CAAf,EAAkBhB,EAAnB,CAAN,KAAiCiB,MAAM,CAACH,MAAM,CAACd,EAAR,CAA1C,EACIe,SAAS,CAACG,IAAV,CAAehB,KAAK,CAACG,QAAN,CAAeW,CAAf,CAAf;AACP;;AACD,aAAQ;AAAEX,QAAAA,QAAQ,EAAEU;AAAZ,OAAR;;AAGJ,SAAK,aAAL;AACID,MAAAA,MAAM,GAAGX,cAAT,CADJ,CAEI;;AACA,UAAIgB,QAAQ,GAAG,EAAf;;AACA,WAAI,IAAIC,CAAR,IAAalB,KAAK,CAACG,QAAnB,EAA4B;AACxBc,QAAAA,QAAQ,CAACD,IAAT,CAAchB,KAAK,CAACG,QAAN,CAAee,CAAf,CAAd;AACH;;AACDD,MAAAA,QAAQ,CAACD,IAAT,CAAc;AACVlB,QAAAA,EAAE,EAAEc,MAAM,CAACpB,OAAP,CAAeM,EADT;AAEVqB,QAAAA,IAAI,EAAEP,MAAM,CAACpB,OAAP,CAAe2B,IAFX;AAGVC,QAAAA,WAAW,EAACR,MAAM,CAACpB,OAAP,CAAe4B,WAHjB;AAIVC,QAAAA,KAAK,EAAET,MAAM,CAACpB,OAAP,CAAe6B;AAJZ,OAAd;AAMA,aAAQ;AAAElB,QAAAA,QAAQ,EAAEc;AAAZ,OAAR;;AAEJ;AACI,aAAOjB,KAAP;AA5BR;AA8BH,CA7CM","sourcesContent":["//import { Action, Reducer } from 'redux';\r\nimport { Reducer } from 'redux';\r\nimport {Producto} from '../types'\r\nimport { TarjetaCredito } from '../models/tarjetacredito'\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\n\r\n\r\nexport interface WeatherTarjetaState{\r\n    //products:Array<Producto>\r\n    tarjetas:TarjetaCredito[]\r\n}  \r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface IncrementCountAction { type: 'INCREMENT_COUNT' }\r\nexport interface DecrementCountAction { type: 'DECREMENT_COUNT' }\r\nexport interface ADD_TO_CART { \r\n    type: 'ADD_TO_CART',\r\n    payload:{\r\n        id: string;\r\n        name: string;\r\n        description:string\r\n        price: string;\r\n    }\r\n}\r\nexport interface DELETE_PRODUCT { \r\n    type: 'DELETE_PRODUCT',\r\n    id: string;\r\n}\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAction = IncrementCountAction | DecrementCountAction | ADD_TO_CART | DELETE_PRODUCT;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    increment: () => ({ payload:'data',type: 'INCREMENT_COUNT' } as IncrementCountAction),\r\n    decrement: () => ({ type: 'DECREMENT_COUNT' } as DecrementCountAction),\r\n    addToCart: (product:Producto) => ({ payload:product,type: 'ADD_TO_CART' } as ADD_TO_CART),  \r\n    deleteProduct: (id:string) => ({ id:id,type: 'DELETE_PRODUCT' } as DELETE_PRODUCT)  \r\n\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nexport const reducer: Reducer<WeatherTarjetaState> = (state: WeatherTarjetaState | undefined, incomingAction: KnownAction): WeatherTarjetaState => {\r\n    if (state === undefined) {\r\n        let tarjetas = [\r\n            {\r\n                id:1,\r\n                titular: \"\",\r\n                numeroTarjeta: \"2626262626262626\",\r\n                fechaExpiracion: \"12/24\",\r\n                cvv:  \"231\"\r\n            }\r\n        ]\r\n        return { tarjetas: tarjetas };\r\n    }\r\n    console.log('incomingAction: '+JSON.stringify(incomingAction))\r\n    var action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'DELETE_PRODUCT':\r\n            action = incomingAction as DELETE_PRODUCT;\r\n            //let products:Array<Producto>\r\n            let products2 = []\r\n            for(var y in state.tarjetas){\r\n                if(String(state.tarjetas[y].id) !== String(action.id))\r\n                    products2.push(state.tarjetas[y]);\r\n            } \r\n            return  { tarjetas: products2 };\r\n            \r\n\r\n        case 'ADD_TO_CART':\r\n            action = incomingAction as ADD_TO_CART;\r\n            //let products:Array<Producto>\r\n            let products = []\r\n            for(var x in state.tarjetas){\r\n                products.push(state.tarjetas[x]);\r\n            }\r\n            products.push({\r\n                id: action.payload.id,\r\n                name: action.payload.name,\r\n                description:action.payload.description,\r\n                price: action.payload.price\r\n            }); \r\n            return  { tarjetas: products };\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}